openapi: 3.0.0
info:
  title: Photo Server Api
  version: '1.0'
  description: photo api for mvp1
servers:
  - url: 'http://localhost:3000/api'
paths:
  /photo:
    get:
      summary: get photo list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Photo'
              examples:
                example-1:
                  value:
                    - _id: 12345678901234567890a001
                      name: my.png
                      album: default
                      type: image/png
                      title: RSC work flow
                      description: ''
                    - _id: 12345678901234567890a002
                      name: logo.png
                      album: logo
                      type: image/png
                      title: logo
                      description: ''
      operationId: get-photo info
      security:
        - jwt: []
      description: 'query photo info ; '
      parameters:
        - schema:
            type: string
          in: query
          name: album
          description: filter by album
        - schema:
            type: string
          in: query
          name: q
          description: text search
      tags:
        - photo
    post:
      summary: upload photo
      operationId: post-photo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
              examples:
                example-1:
                  value:
                    _id: 12345678901234567890b001
                    name: p
                    album: default
                    type: image/png
                    title: test picture
                    description: ''
      security:
        - jwt: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Photo:
                  type: string
                  description: photo file
                  format: binary
                name:
                  type: string
                album:
                  type: string
                title:
                  type: string
                description:
                  type: string
                type:
                  type: string
              required:
                - Photo
            examples:
              example-1:
                value:
                  photo: 'file:/test.png'
                  name: p
                  album: default
                  type: image/png
                  title: test picture
                  description: ''
        description: ''
      description: upload photo
      tags:
        - photo
    parameters: []
    delete:
      summary: delete photo
      operationId: delete-photo
      responses:
        '200':
          description: OK
      tags:
        - photo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
              required:
                - ids
            examples:
              example-1:
                value:
                  ids:
                    - '123456789012345678901111'
                    - '123456789012345678901112'
        description: ''
      description: ''
      security:
        - jwt: []
  '/image/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: photo id
    get:
      summary: get image file by id
      responses:
        '200':
          description: OK
          content:
            image/png:
              schema:
                type: string
                format: binary
              examples:
                example-1: {}
            application/json:
              schema:
                type: string
                format: binary
              examples: {}
          headers: {}
      operationId: get-photo
      description: photo file
      tags:
        - photo
components:
  schemas:
    Photo:
      title: Photo
      type: object
      description: ''
      x-examples:
        example-1:
          _id: 12345678901234567890a001
          name: group1
          album: default
          type: image/png
          title: logo
          description: ''
      properties:
        _id:
          type: string
        name:
          type: string
        album:
          type: string
        type:
          type: string
        title:
          type: string
        description:
          type: string
      x-tags:
        - images
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      description: ''
